# a simple interpreter, in direct style.
# to get to a fueled interpreter,
# we need to convert this into trampolined style,
# and then thread a "fuel" argument through the control flow,
# test-and-decrementing the fuel wherever we
# want to charge a "step" of computation.
# 
# an expression can be a symbol
# exp ::= Sym(name)
# the value of a symbol is looked up in the environment, then returned
ev(Sym(?name), ?env) == lookup(?env, ?name)

# an expression can be a nonpair
#   all nonpairs are already values; just return it
# exp ::= Nonpair(val)

ev(Nonpair(?val), ?env) == ?val
# an expression can be a quote
# exp ::= Quote(?x)
#   take the quotes off and return whatever is inside

ev(Quote(?x), ?env) == ?x
# an expression can be an if
# exp ::= If(?test, ?truebranch, ?falsebranch)
#   to eval an if
#   first eval the test of the if
#   then use the host-language "if"
#   to decide whether to eval and return the
#   true branch or the false branch of the if

ev(If(?test, ?truebranch, ?falsebranch), ?env) == decide(ev(?test, ?env), ?truebranch, ?falsebranch, ?env)
decide(True, ?truebranch, ?falsebranch, ?env) == ev(?truebranch, ?env)
decide(False, ?truebranch, ?falsebranch, ?env) == ev(?falsebranch, ?env)
# an expression can be a lambda
# exp ::= Lambda(?params, ?body)
#   construct something that is sufficient to eval the body,
#   once we get some actuals to bind to those formal parameters.

ev(Lambda(?params, ?body), ?env) == Closure(?params, ?body, ?env)
# an expression can be a function application
# exp ::= App(?f, ?xs)
#   to eval a function application,
#   eval the function,
#   eval the args,
#   then combine the formals with the actuals 
ev(App(?f, ?xs), ?env) == enter(ev(?f, ?env), evlist(?xs, ?env))
enter(Closure(?formals, ?bodyexp, ?env), ?actuals) == ev(?bodyexp, bind(?formals, ?actuals, ?env))
evlist(Nil, ?env) == Nil
evlist(Cons(?x, ?xs), ?env) == Cons(ev(?x, ?env), evlist(?xs, ?env))


# stuff regarding the environment
# environments can be empty
# env ::= Empty
# environments can be extensions of other environments
# where a particular name is bound to a particular value
# env ::= Extend(name, value, env)

# bind is a helper function that takes a list of names and
# a list of values, and binds each name to the corresponding value
# there's some nonsense about shadowing - just don't do it, mkay?
bind(Cons(?n, ?ns), Cons(?v, ?vs), ?env) == bind(?ns, ?vs, Extend(?n, ?v, ?env))
bind(Nil, Nil, ?env) == ?env

# lookup looks up a particular name and returns the first one it finds
lookup(Extend(?name, ?val, ?env), ?tofind) == if ?name = ?tofind then ?val else lookup(?env, ?tofind)

# for (entirely insufficient) testing:
ev(App(Lambda(Cons(x, Nil), Sym(x)), Cons(Quote(123), Nil)), Empty)

# does not terminate
#ev(App(Lambda(Cons(x, Nil), App(Sym(x), Cons(Sym(x), Nil))), Cons(Lambda(Cons(x, Nil), App(Sym(x), Cons(Sym(x), Nil))), Nil)), Empty)
